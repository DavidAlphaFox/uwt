.DEFAULT: lib
.PHONY: clean all distclean doc lib

CC= $(OCAMLC_CC)
CFLAGS= $(OCAMLC_CC_CFLAGS) $(CFLAGS)

if $(equal $(OSTYPE),Win32)
	configure config.h.in: configure.ac
		if $(or $(not $(file-exists configure)),$(not $(file-exists config.h.in)))
			bash.exe autoreconf -fi
		else
			touch configure config.h.in
	config.h config.inc: config.h.in configure config.inc.in
		bash.exe configure CC="$(OCAMLC_CC)" CFLAGS="$(CFLAGS) $(CFLAGS_LIBUV)"  LDFLAGS="$(LDFLAGS_LIBUV)"
else
	configure config.h.in: configure.ac
		if $(or $(not $(file-exists configure)),$(not $(file-exists config.h.in)))
			autoreconf -fi
		else
			touch configure config.h.in
	config.h config.inc: config.h.in configure config.inc.in
		./configure CC="$(OCAMLC_CC)" CFLAGS="$(CFLAGS) $(CFLAGS_LIBUV)"  LDFLAGS="$(LDFLAGS_LIBUV)"

clean::
	rm -f config.log config.status

distclean::
	rm -f config.h *~ configure config.inc
	rm -rf autom4te.cache

section
	.SCANNER: scan-c-%: config.h
	CFILES= emap_gen
	CFLAGS= $(CFLAGS) $(CFLAGS_LIBUV)
	LDFLAGS+= $(LDFLAGS_LIBUV)
	Repeat_ctargets($(CFILES))
	T=$(CProgram emap_gen, $(CFILES))
	clean::
		rm -f emap_gen$(EXE)
	distclean::
		rm -f error.ml error_val.ml error_val.mli map_error.h
	error.ml error_val.ml map_error.h: emap_gen$(EXE)
		if $(or $(not $(file-exists error.ml)),$(or $(not $(file-exists error_val.ml)), $(not $(file-exists map_error.h))))
			./emap_gen$(EXE)
		else
			touch error.ml error_val.ml map_error.h

OCAMLPACKS+= bigarray unix
section
	.SCANNER: scan-c-%: map_error.h config.h
	.SCANNER: scan-ocaml-%: error.ml error_val.ml
	OCAMLFINDFLAGS+= -pp cppo
	MLFILES= uwt_base uwt_bytes
	CFILES= uwt_stubs uwt_bytes_stubs uwt_stubs_unix
	CFLAGS=$(CFLAGS) $(CFLAGS_LIBUV)
	LDFLAGS+=$(LDFLAGS_LIBUV)
	Repeat_targets($(MLFILES))
	UWT_BASE=$(MixedLibrary uwt-base, $(MLFILES), $(CFILES))
	lib:: $(UWT_BASE)
	export UWT_BASE

section
	MLFILES= uv_fs_sync
	OCAML_LIBS+= uwt-base
	Repeat_targets($(MLFILES))
	UV_SYNC=$(MOCamlLibrary uv-fs-sync, $(MLFILES))
	lib:: $(UV_SYNC)
	export UV_SYNC

section
	.SCANNER: scan-ocaml-%: config.inc
	OCAMLFINDFLAGS+= -pp cppo
	OCAMLPACKS+= lwt
	MLFILES= uwt
	OCAML_LIBS+= uwt-base
	Repeat_targets($(MLFILES))
	UWT_CORE=$(MOCamlLibrary uwt, $(MLFILES))
	lib:: $(UWT_CORE)
	export UWT_CORE

section
	OCAMLPACKS+= lwt
	OCAML_LIBS+= uwt-base uwt
	FILES= uwt_log uwt_io uwt_process uwt_throttle uwt_timeout
	Repeat_targets($(FILES))
	UWT_EXT=$(MOCamlLibrary uwt-ext, $(FILES))
	lib:: $(UWT_EXT)
	export UWT_EXT

section
	OCAMLPACKS+= lwt
	OCAML_LIBS+= uwt-base uwt uwt-ext
	OCAMLFLAGS+= -thread
	FILES= uwt_preemptive
	Repeat_targets($(FILES))
	UWT_PREEMPTIVE=$(MOCamlLibrary uwt-preemptive,$(FILES))
	lib:: $(UWT_PREEMPTIVE)
	export UWT_PREEMPTIVE

section
	OCAMLPACKS+= lwt lwt.log
	OCAML_LIBS+= uwt-base uwt uwt-ext
	FILES= uwt_compat
	Repeat_targets($(FILES))
	UWT_COMPAT=$(MOCamlLibrary uwt-compat,$(FILES))
	lib:: $(UWT_COMPAT)
	export UWT_COMPAT

section
	OCAMLPACKS+= lwt
	x=$(CreateDoc uwt,html,uwt_base.mli uv_sync.mli uwt_bytes.mli uwt.mli uwt_io.mli)

ConfReplace(META)
Install_helper($(PROJNAME),$(UWT_BASE) $(UV_SYNC) $(UWT_CORE) $(UWT_COMPAT) $(UWT_EXT) $(UWT_PREEMPTIVE) uwt-worker.h)

clean::
	clean-helper()
	rm -f oUnit*.log setup.data setup.log *.tar*

distclean:: clean
	rm -f *~

all:: lib
