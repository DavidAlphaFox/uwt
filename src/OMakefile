.DEFAULT: lib
.PHONY: clean all distclean doc lib

CC= $(OCAMLC_CC)
CFLAGS= $(OCAMLC_CC_CFLAGS) $(CFLAGS)

if $(equal $(OSTYPE),Win32)
	configure config.h.in: configure.ac
		if $(or $(not $(file-exists configure)),$(not $(file-exists config.h.in)))
			bash.exe autoreconf -fi
		else
			touch configure config.h.in
	config.h: config.h.in configure
		bash.exe configure CC="$(OCAMLC_CC) $(OCAMLC_CC_CFLAGS)"
else
	configure config.h.in: configure.ac
		if $(or $(not $(file-exists configure)),$(not $(file-exists config.h.in)))
			autoreconf -fi
		else
			touch configure config.h.in
	config.h: config.h.in configure
		./configure CC="$(OCAMLC_CC) $(OCAMLC_CC_CFLAGS)"

clean::
	rm -f config.log config.status

distclean::
	rm -f config.h *~ configure
	rm -rf autom4te.cache

section
	.SCANNER: scan-c-%: config.h
	CFILES= emap_gen
	CFLAGS= $(CFLAGS) $(CFLAGS_LIBUV)
	LDFLAGS+= $(LDFLAGS_LIBUV)
	Repeat_ctargets($(CFILES))
	T=$(CProgram emap_gen, $(CFILES))
	clean::
		rm -f emap_gen$(EXE) error.ml error_val.ml error_val.mli map_error.h
	error.ml error_val.ml map_error.h: emap_gen$(EXE)
		./emap_gen$(EXE)

section
	.SCANNER: scan-c-%: map_error.h config.h
	.SCANNER: scan-ocaml-%: error.ml error_val.ml
	OCAMLPACKS+= lwt bigarray unix
	OCAMLFINDFLAGS+= -pp cppo
	MLFILES= uwt uwt_bytes uwt_io
	CFILES= uwt_stubs uwt_bytes_stubs
	CFLAGS=$(CFLAGS) $(CFLAGS_LIBUV)
	LDFLAGS+=$(LDFLAGS_LIBUV)
	Repeat_targets($(MLFILES))
	UWT_CORE=$(MixedLibrary uwt, $(MLFILES), $(CFILES))
	lib:: $(UWT_CORE)
	export UWT_CORE

section
	OCAMLPACKS+= lwt bigarray unix lwt.log
	OCAML_LIBS+= $(file uwt)
	FILES= uwt_log
	Repeat_targets($(FILES))
	UWT_LOG=$(MOCamlLibrary uwt_log, $(FILES)) $(addsuffix .cmi,$(FILES))
	lib:: $(UWT_LOG)
	export UWT_LOG

section
	OCAMLPACKS+= lwt bigarray unix lwt.log threads
	OCAML_LIBS+= $(file uwt) $(file uwt_log)
	OCAMLFLAGS+= -thread
	FILES= uwt_preemptive
	Repeat_targets($(FILES))
	UWT_PREEMPTIVE=$(MOCamlLibrary uwt_preemptive,$(FILES)) $(addsuffix .cmi,$(FILES))
	lib:: $(UWT_PREEMPTIVE)
	export UWT_PREEMPTIVE

section
	OCAMLPACKS+= lwt bigarray unix lwt.log
	OCAML_LIBS+= $(file uwt) $(file uwt_log)
	FILES= uwt_compat
	Repeat_targets($(FILES))
	UWT_COMPAT=$(MOCamlLibrary uwt_compat,$(FILES)) $(addsuffix .cmi,$(FILES))
	lib:: $(UWT_COMPAT)
	export UWT_COMPAT

section
	OCAMLPACKS+= lwt bigarray unix
	x=$(CreateDoc uwt,html,uwt.mli uwt_io.mli)

ConfReplace(META)

clean::
	rm -f META

.PHONY: install uninstall
section
	UWT= $(UWT_CORE) $(UWT_COMPAT) $(UWT_LOG) $(UWT_PREEMPTIVE)
	IFILES= $(filter-out %.o %.cmo, $(UWT))
	CMTIFILES=$(replacesuffixes .cma, .cmti, $(filter %.cma, $(UWT)))
	install: META $(UWT)
		$(OCAMLFIND) remove uwt || true
		$(OCAMLFIND) install uwt META $(IFILES) -optional $(CMTIFILES)
	uninstall:
		$(OCAMLFIND) remove uwt

clean::
	clean-helper()
	rm -f oUnit*.log setup.data setup.log *.tar*

distclean:: clean
	rm -f *~

all:: lib
