version = "@VERSION@"
description = "libuv bindings"
requires = "lwt uwt.base"
archive(byte) = "uwt.cma"
archive(byte, plugin) = "uwt.cma"
archive(native) = "uwt.cmxa"
archive(native, plugin) = "uwt.cmxs"
exists_if = "uwt.cma"

package "base" (
 version = "@VERSION@"
 description = "Base for uwt and uv_sync"
 requires = "unix bytes bigarray result"
 archive(byte) = "uwt-base.cma"
 archive(byte, plugin) = "uwt-base.cma"
 archive(native) = "uwt-base.cmxa"
 archive(native, plugin) = "uwt-base.cmxs"
 exists_if = "uwt-base.cma"
)

package "sync" (
 version = "@VERSION@"
 description = "Synchronous libuv functions"
 requires = "uwt.base"
 archive(byte) = "uv-fs-sync.cma"
 archive(byte, plugin) = "uv-fs-sync.cma"
 archive(native) = "uv-fs-sync.cmxa"
 archive(native, plugin) = "uv-fs-sync.cmxs"
 exists_if = "uv-fs-sync.cma"
)

package "ext" (
 version = "@VERSION@"
 description = "higher level APIs like Uwt_io"
 requires = "uwt lwt.log"
 archive(byte) = "uwt-ext.cma"
 archive(byte, plugin) = "uwt-ext.cma"
 archive(native) = "uwt-ext.cmxa"
 archive(native, plugin) = "uwt-ext.cmxs"
 exists_if = "uwt-ext.cma"
)

package "preemptive" (
 version = "@VERSION@"
 description = "Preemptive threads support for Uwt"
 requires = "uwt uwt.ext threads"
 archive(byte) = "uwt-preemptive.cma"
 archive(byte, plugin) = "uwt-preemptive.cma"
 archive(native) = "uwt-preemptive.cmxa"
 archive(native, plugin) = "uwt-preemptive.cmxs"
 exists_if = "uwt-preemptive.cma"
)

package "compat" (
 version = "@VERSION@"
 description = "compat mode for lwt.unix"
 requires = "uwt uwt.ext"
 archive(byte) = "uwt-compat.cma"
 archive(byte, plugin) = "uwt-compat.cma"
 archive(native) = "uwt-compat.cmxa"
 archive(native, plugin) = "uwt-compat.cmxs"
 exists_if = "uwt-compat.cma"
)
