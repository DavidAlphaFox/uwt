version = "@VERSION@"
description = "libuv bindings"
requires = "lwt uwt.base"
archive(byte) = "uwt.cma"
archive(byte, plugin) = "uwt.cma"
archive(native) = "uwt.cmxa"
archive(native, plugin) = "uwt.cmxs"
exists_if = "uwt.cma"

package "base" (
 version = "@VERSION@"
 description = "Base for uwt and uv_sync"
 requires = "unix bytes bigarray"
 archive(byte) = "uv_base.cma"
 archive(byte, plugin) = "uv_base.cma"
 archive(native) = "uv_base.cmxa"
 archive(native, plugin) = "uv_base.cmxs"
 exists_if = "uv_base.cma"
)

package "sync" (
 version = "@VERSION@"
 description = "Synchronous libuv functions"
 requires = "uwt.base"
 archive(byte) = "uv_sync.cma"
 archive(byte, plugin) = "uv_sync.cma"
 archive(native) = "uv_sync.cmxa"
 archive(native, plugin) = "uv_sync.cmxs"
 exists_if = "uv_sync.cma"
)

package "log" (
 version = "@VERSION@"
 description = "Logger for uwt"
 requires = "uwt lwt.log"
 archive(byte) = "uwt_log.cma"
 archive(byte, plugin) = "uwt_log.cma"
 archive(native) = "uwt_log.cmxa"
 archive(native, plugin) = "uwt_log.cmxs"
 exists_if = "uwt_log.cma"
)

package "preemptive" (
 version = "@VERSION@"
 description = "Preemptive threads support for Uwt"
 requires = "uwt uwt.logt threads"
 archive(byte) = "uwt_preemptive.cma"
 archive(byte, plugin) = "uwt_preemptive.cma"
 archive(native) = "uwt_preemptive.cmxa"
 archive(native, plugin) = "uwt_preemptive.cmxs"
 exists_if = "uwt_preemptive.cma"
)

package "compat" (
 version = "@VERSION@"
 description = "compat mode for lwt.unix"
 requires = "uwt uwt.log"
 archive(byte) = "uwt_compat.cma"
 archive(byte, plugin) = "uwt_compat.cma"
 archive(native) = "uwt_compat.cmxa"
 archive(native, plugin) = "uwt_compat.cmxs"
 exists_if = "uwt_compat.cma"
)
